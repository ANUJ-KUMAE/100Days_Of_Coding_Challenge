Furthest Point From Origin
You are given a string moves of length n consisting only of characters 'L', 'R', and '_'. The string represents your movement on a number line starting from the origin 0.

In the ith move, you can choose one of the following directions:

move to the left if moves[i] = 'L' or moves[i] = '_'
move to the right if moves[i] = 'R' or moves[i] = '_'
Return the distance from the origin of the furthest point you can get to after n moves.
 
Example 1:

Input: moves = "L_RL__R"
Output: 3
Explanation: The furthest point we can reach from the origin 0 is point -3 through the following sequence of moves "LLRLLLR".
Example 2:

Input: moves = "_R__LL_"
Output: 5
Explanation: The furthest point we can reach from the origin 0 is point -5 through the following sequence of moves "LRLLLLL".

Solution: 

class Solution {
    public int furthestDistanceFromOrigin(String moves)
    { 
        int Left=0, Right=0, Result=0;
        int n = moves.length();
        for(int i=0;i<n;i++)
        {
            if(moves.charAt(i) == 'L')
            {
                Left++;
            }
            else if(moves.charAt(i) == 'R')
            {
                Right++;
            }
        }

        if(Left>Right)
        {
            Result = Left - Right;
        }
        else
        {
            Result = Right - Left;
        }

        Result += (n - Left - Right);

        return Result;
    }
}
