Permutation II: 

Given a collection of numbers, nums, that might contain duplicates, return all possible unique permutations in any order.

 

Example 1:

Input: nums = [1,1,2]
Output:
[[1,1,2],
 [1,2,1],
 [2,1,1]]
Example 2:

Input: nums = [1,2,3]
Output: [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]

Solution: 

class Solution {
    public List<List<Integer>> permuteUnique(int[] nums) 
    {
        List<List<Integer>> lst = new ArrayList<>();
        List<Integer> current = new ArrayList<>();
        Arrays.sort(nums);
        boolean result[] = new boolean[nums.length];
        setPermutation(nums, lst, current, result);
        return lst;  
    }

    private void setPermutation(int nums[], List<List<Integer>> lst, List<Integer> current, boolean result[])
    {
        if(current.size() == nums.length)
        {
            lst.add(new ArrayList<>(current));
            return;
        }

        for(int i=0;i<nums.length;i++)
        {
            if(result[i] || i>0 && nums[i] == nums[i-1] && !result[i-1])
            {
                continue;
            }
            current.add(nums[i]);
            result[i] = true;
            setPermutation(nums, lst, current, result);
            result[i] = false;
            current.remove(current.size() - 1);

        }
    }
}
