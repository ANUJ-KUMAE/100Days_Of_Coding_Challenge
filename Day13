Implement different operations on Treemap. Operations will be performed by different types of queries.
A query can be of four types:
1. a x y (adds an entry with key x and value y to the Treemap)
2. b x (print value of  x if present in the Treemap else print -1. )
3. c (prints the size of the Treemap)
4. d x ( removes an entry with key x from the map )
5. e (print map sorted by key)

Example 1:

Input:
6
a 1 2 a 66 3 b 66 d 1 c e

Output:
3 1 66

Explanation:
There are five queries. Queries are performed in this order
1. a 1 2    --->  map has a key 1 with value 2 
2. a 66 3   ---> map has a key 66 with value 3
3. b 66     ---> prints the value of key 66 if its present in the map ie 3.
4. d 1      ---> removes an entry from map with key 1
5. c        ---> prints the size of the map ie 1
6. e        ---> prints the map sorted by key
 

Example 2:

Input:
4
a 1 66 b 5 c e

Output:
-1 1 1

Explanation:
There are three queries. Queries are performed in this order
1. a 1 66   ---> adds a key 1 with a value of 66 in the map
2. b 5      --->  since the key 5 is not present in the map hence -1 is printed.
3. c        ---> prints the size of the map ie 1 
4. e        ---> prints the map sorted by key
Your Task:
You are required to complete the following functions:
add_Value : Takes HashMap, x, y as arguments and maps x as key and y as its value. Does not return anything.
find_value : Takes HashMap and x as arguments. If HM contains x key then return the value, else return -1.
getSize : Takes HashMap as argument and just returns its size.
removeKey : Takes HashMap and x as arguments and removes x if it exists. Does not return anything.
sorted_By_Key : Takes HashMap as argument and prints the keys that are sorted. Don't print newline.

Solution:

class GfG
{
    /*Inserts an entry with key x and value y in map */
    void add_Value(TreeMap<Integer,Integer> hm, int x, int y)
    {
	      hm.put(x,y);
    }
	
    /*Returns the value with key x from the map */
    int find_value(TreeMap<Integer, Integer> hm, int x)
    {
        int z;
        if(hm.containsKey(x))
        {
            z=hm.get(x);
            return z;
        }
        else
        {
            return -1;
        }
    }
	
    /*Returns the size of the map */
    int getSize(TreeMap<Integer, Integer> hm)
    {
	      int p = hm.size();
	      return p;
    }
		
    /*Removes the entry with key x from the map */	
    void removeKey(TreeMap<Integer, Integer> hm, int x)
    {
	      hm.remove(x);	
    }

    /*print map sorted by key */	
    void sorted_By_Key(TreeMap<Integer, Integer> hm)
    {
	    Map<Integer, Integer> map = new TreeMap<Integer, Integer>(hm);
		Set set1 = map.entrySet();
		Iterator itr = set1.iterator();
		while(itr.hasNext())
		{
			Map.Entry me = (Map.Entry)itr.next();
			System.out.print(me.getKey()+ " ");
		}	
    }   
}
